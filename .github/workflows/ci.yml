name: CI

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - .github/workflows/ci.yml

# ref: https://github.com/hzyitc/armbian-onecloud/blob/readme/.github/workflows/ci.yml

env:
  UBOOT_REPO: hzyitc/u-boot-onecloud
  UBOOT_RELEASE: latest
  UBOOT_BURNIMG: eMMC.burn.img
  ARMBIAN_REPO: armbian/build
  ARMBIAN_REF: master
  ARMBIAN_SHA: fa89975db7171e458c0807a964705724270c8131

jobs:
  build:
    name: Build ${{ matrix.RELEASE }}-${{ matrix.BRANCH }}-${{ matrix.TYPE == 'desktop' && matrix.DESKTOP_ENVIRONMENT || matrix.TYPE }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        BRANCH:
          - edge
        RELEASE:
          - bullseye # Debian 11
        TYPE:
          - minimal
          - desktop
        exclude:
          - BRANCH: current
            TYPE: desktop
          - BRANCH: legacy
            TYPE: desktop
        include:
          - TYPE: desktop
            DESKTOP_ENVIRONMENT: xfce
            DESKTOP_ENVIRONMENT_CONFIG_NAME: config_base
            DESKTOP_APPGROUPS_SELECTED: ""

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: ${{ env.ARMBIAN_REPO }}
          ref: ${{ env.ARMBIAN_SHA }}

      - name: "Apply patch #3981"
        run: |
          curl -L -O https://github.com/armbian/build/pull/3981.patch
          git apply 3981.patch

      - name: Build
        run: |
          sudo ./compile.sh \
            BOARD=onecloud \
            BRANCH=${{ matrix.BRANCH }} \
            RELEASE=${{ matrix.RELEASE }} \
            KERNEL_CONFIGURE=no \
            KERNEL_ONLY=no \
            INSTALL_HEADERS=yes \
            BUILD_MINIMAL=${{ matrix.TYPE == 'minimal' && 'yes' || 'no' }} \
            BUILD_DESKTOP=${{ matrix.TYPE == 'desktop' && 'yes' || 'no' }} \
            DESKTOP_ENVIRONMENT=${{ matrix.DESKTOP_ENVIRONMENT }} \
            DESKTOP_ENVIRONMENT_CONFIG_NAME=${{ matrix.DESKTOP_ENVIRONMENT_CONFIG_NAME }} \
            DESKTOP_APPGROUPS_SELECTED=${{ matrix.DESKTOP_APPGROUPS_SELECTED }} \
            EXPERT=yes \
            USE_CCACHE=no \
            NO_APT_CACHER=yes \
            COMPRESS_OUTPUTIMAGE=img,xz,sha,gpg
          sudo chown $(id -u):$(id -g) -R output/

      - name: Download AmlImg
        run: |
          ver="v0.3.0"
          curl -L -o ./AmlImg https://github.com/hzyitc/AmlImg/releases/download/$ver/AmlImg_${ver}_linux_amd64
          chmod +x ./AmlImg

      - name: Download and unpack the latest u-boot
        run: |
          echo "::group::Download"
          curl -L -o ./uboot.img https://github.com/${UBOOT_REPO}/releases/download/${UBOOT_TAG}/${UBOOT_BURNIMG}
          echo "::endgroup::"

          echo "::group::Unpack"
          ./AmlImg unpack ./uboot.img burn/
          echo "::endgroup::"

      - name: Extract boot and rootfs partitions
        run: |
          diskimg=$(ls output/images/*.img)
          loop=$(sudo losetup --find --show --partscan $diskimg)
          sudo dd if=${loop}p1 of=burn/boot.img
          sudo dd if=${loop}p2 of=burn/rootfs.img
          sudo losetup -d $loop
          sudo chown $(id -u):$(id -g) -R burn/

      - name: Generate burn image
        run: |
          echo -n "sha1sum $(sha1sum burn/boot.img | awk '{print $1}')" >burn/boot.VERIFY
          echo -n "sha1sum $(sha1sum burn/rootfs.img | awk '{print $1}')" >burn/rootfs.VERIFY

          cat <<EOF >>burn/commands.txt
          PARTITION:boot:normal:boot.img
          VERIFY:boot:normal:boot.VERIFY
          PARTITION:rootfs:normal:rootfs.img
          VERIFY:rootfs:normal:rootfs.VERIFY
          EOF

          prefix=$(ls output/images/*.img | sed 's/\.img$//')
          burnimg=${prefix}.burn.img
          ./AmlImg pack $burnimg burn/

      - name: Hash and compress burn image
        run: |
          cd output/images/
          burnimg=$(ls *.burn.img)
          sha256sum $burnimg | tee ${burnimg}.sha

          pixz -9 <$burnimg >${burnimg}.xz

      - name: Clean original files
        run: |
          rm -rf output/images/*.img

      - name: Setup env
        run: |
          echo "date=$(date +%Y%m%d-%H%M)" >> $GITHUB_ENV
          
      - name: Upload data to new tag
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.date }}
          files: |
            output/images/*

      - name: Upload debs to new tag
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.date }}-debs-${{ matrix.RELEASE }}-${{ matrix.BRANCH }}-${{ matrix.TYPE == 'desktop' && matrix.DESKTOP_ENVIRONMENT || matrix.TYPE }}
          files: |
            output/debs/*.deb
